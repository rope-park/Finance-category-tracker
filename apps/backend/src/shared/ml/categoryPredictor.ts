/**
 * 머신러닝 기반 카테고리 자동 분류 서비스
 * 
 * 거래 내역의 설명 텍스트를 분석하여 적절한 카테고리를 자동으로 예측하는 AI 서비스.
 * 현재는 키워드 매칭 기반의 간단한 룰 엔진을 사용하며, 향후 딥러닝 모델로 업그레이드 예정.
 * 
 * 주요 기능:
 * - 텍스트 키워드 분석을 통한 카테고리 예측
 * - 신뢰도 점수 제공 (0~1 범위)
 * - 다양한 카테고리별 키워드 매칭
 * - 한국어 거래 내역 처리 최적화
 * 
 * TODO:
 * - Python ML 라이브러리 연동
 * - 사용자 거래 패턴 학습 기능
 * - 실시간 모델 업데이트
 * - 정확도 향상을 위한 앙상블 모델 적용
 * 
 * @author Ju Eul Park (rope-park)
 */

// 예측 결과 인터페이스
export interface CategoryPrediction {
  category: string;    // 예측된 카테고리 키 (예: 'food', 'transport', 'shopping')
  confidence: number;  // 예측 신뢰도 (0.0 ~ 1.0, 1.0이 가장 확실함)
}

/**
 * 카테고리별 키워드 매칭 테이블
 * 
 * 각 카테고리마다 관련된 한국어 키워드들을 정의하여
 * 거래 설명 텍스트에서 해당 키워드가 발견되면 해당 카테고리로 분류함.
 * 
 * 실제 서비스에서는 다음과 같이 확장 예정:
 * - 더 많은 키워드 추가 (동의어, 줄임말, 오타 등)
 * - 가중치 기반 키워드 매칭
 * - 사용자 맞춤 키워드 학습
 * - 부정적 키워드 (특정 카테고리에서 제외할 키워드)
 */
const CATEGORY_KEYWORDS: Record<string, string[]> = {
  /** 식음료 카테고리 - 음식점, 카페, 배달음식 등 */
  food: ['식사', '점심', '저녁', '카페', '커피', '음식', '레스토랑', '배달'],
  
  /** 교통비 카테고리 - 대중교통, 택시, 기차 등 */
  transport: ['버스', '지하철', '택시', '교통', 'KTX', '기차', '고속버스'],
  
  /** 쇼핑 카테고리 - 온라인몰, 마트, 생필품 구매 등 */
  shopping: ['쇼핑', '구매', '마켓', '쿠팡', 'G마켓', '11번가', '이마트'],
  
  /** 급여/수입 카테고리 - 월급, 보너스, 부수입 등 */
  salary: ['월급', '급여', '연봉', '보너스'],
  
  /** 의료/건강 카테고리 - 병원, 약국, 건강관리 등 */
  health: ['병원', '약국', '의료', '건강', '진료'],
  
  /** 여가/엔터테인먼트 카테고리 - 영화, 여행, 취미활동 등 */
  leisure: ['영화', '여행', '호텔', '공연', '레저', '관광'],
  
  /** 공과금 카테고리 - 전기세, 수도세, 관리비 등 */
  utility: ['공과금', '수도', '전기', '가스', '관리비'],
  
  /** 교육 카테고리 - 학원비, 교재비, 강의료 등 */
  education: ['학원', '교육', '수강', '강의', '교재'],
  
  /** 기타 카테고리 - 분류되지 않는 모든 거래 */
  etc: []
};

/**
 * 거래 설명 텍스트를 분석하여 카테고리를 예측하는 메인 함수
 * 
 * 현재는 간단한 키워드 매칭 알고리즘을 사용하지만,
 * 향후 TensorFlow.js나 Python ML 모델과 연동하여 정확도를 향상시킬 예정.
 * 
 * 예측 과정:
 * 1. 입력 텍스트를 소문자로 변환
 * 2. 각 카테고리별 키워드와 매칭 시도
 * 3. 가장 많은 키워드가 매칭된 카테고리 선택
 * 4. 매칭 정도에 따라 신뢰도 점수 계산
 * 5. 매칭되는 키워드가 없으면 'etc' 카테고리로 분류
 * 
 * @param text - 분석할 거래 설명 텍스트 (예: "스타벅스 아메리카노")
 * @returns 예측된 카테고리와 신뢰도 점수
 */
export function predictCategory(text: string): CategoryPrediction {
  // 1단계: 입력 텍스트 전처리 - 대소문자 통일로 매칭 정확도 향상
  const lowerText = text.toLowerCase();
  
  // 초기값 설정: 매칭되는 카테고리가 없으면 'etc'로 분류
  let bestMatch = 'etc';
  let bestScore = 0;
  
  // 2단계: 모든 카테고리에 대해 키워드 매칭 수행
  for (const [category, keywords] of Object.entries(CATEGORY_KEYWORDS)) {
    // 현재 카테고리의 키워드 중 텍스트에 포함된 것들 찾기
    const matches = keywords.filter(keyword => 
      lowerText.includes(keyword.toLowerCase())
    );
    
    // 가장 많은 키워드가 매칭된 카테고리를 최종 선택
    if (matches.length > bestScore) {
      bestMatch = category;
      bestScore = matches.length;
    }
  }
  
  // 3단계: 매칭된 키워드 수에 따라 신뢰도 점수 계산
  // - 키워드가 매칭되지 않으면 0.1 (매우 낮은 신뢰도)
  // - 매칭된 키워드 수에 비례하여 신뢰도 증가 (최대 0.9)
  const confidence = bestScore > 0 ? Math.min(0.9, bestScore * 0.3) : 0.1;
  
  return { category: bestMatch, confidence };
}

// =============================================================================
// 향후 개선 계획 및 TODO 항목들
// =============================================================================

/**
 * TODO: 머신러닝 모델 업그레이드 계획
 * 
 * 1. Python ML 모델 연동:
 *    - scikit-learn 또는 TensorFlow 기반 텍스트 분류 모델
 *    - Word2Vec 또는 BERT 기반 의미론적 텍스트 분석
 *    - 사용자 거래 데이터를 활용한 개인화된 모델 학습
 * 
 * 2. 고급 전처리 기능:
 *    - 한국어 형태소 분석 (KoNLPy 연동)
 *    - 불용어 제거 및 어간 추출
 *    - 오타 교정 및 동의어 처리
 * 
 * 3. 실시간 학습 기능:
 *    - 사용자 피드백 기반 모델 재학습
 *    - A/B 테스트를 통한 모델 성능 비교
 *    - 온라인 학습 알고리즘 적용
 * 
 * 4. 성능 최적화:
 *    - 캐싱을 통한 예측 속도 향상
 *    - 배치 예측 지원
 *    - GPU 기반 추론 가속화
 */