input {
  # 백엔드 애플리케이션 로그 파일 읽기
  file {
    path => "/var/log/backend/app.log"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    codec => "json"
    tags => ["backend", "application"]
  }

  file {
    path => "/var/log/backend/error.log"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    codec => "json"
    tags => ["backend", "error"]
  }

  file {
    path => "/var/log/backend/http.log"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    codec => "json"
    tags => ["backend", "http"]
  }

  # PM2 로그 파일 읽기
  file {
    path => "/var/log/backend/pm2-out.log"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    tags => ["pm2", "stdout"]
  }

  file {
    path => "/var/log/backend/pm2-err.log"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    tags => ["pm2", "stderr"]
  }

  # TCP 포트로부터 로그 수신 (실시간 로그)
  tcp {
    port => 5000
    codec => json_lines
    tags => ["tcp", "realtime"]
  }

  # Syslog 수신
  syslog {
    port => 514
    tags => ["syslog"]
  }
}

filter {
  # 타임스탬프 파싱
  if [timestamp] {
    date {
      match => [ "timestamp", "ISO8601" ]
    }
  }

  # HTTP 로그 파싱
  if "http" in [tags] {
    grok {
      match => { 
        "message" => "%{IPORHOST:client_ip} - %{USER:user} \[%{HTTPDATE:timestamp}\] \"%{WORD:method} %{URIPATHPARAM:request} HTTP/%{NUMBER:http_version}\" %{INT:status_code} %{INT:bytes} \"%{DATA:referrer}\" \"%{DATA:user_agent}\" %{NUMBER:response_time} ms"
      }
    }

    mutate {
      convert => { 
        "status_code" => "integer"
        "bytes" => "integer"
        "response_time" => "float"
      }
    }

    # 응답 시간 카테고리 분류
    if [response_time] {
      if [response_time] < 100 {
        mutate { add_field => { "response_category" => "fast" } }
      } else if [response_time] < 500 {
        mutate { add_field => { "response_category" => "normal" } }
      } else if [response_time] < 2000 {
        mutate { add_field => { "response_category" => "slow" } }
      } else {
        mutate { add_field => { "response_category" => "very_slow" } }
      }
    }

    # 상태 코드 카테고리
    if [status_code] {
      if [status_code] >= 200 and [status_code] < 300 {
        mutate { add_field => { "status_category" => "success" } }
      } else if [status_code] >= 300 and [status_code] < 400 {
        mutate { add_field => { "status_category" => "redirect" } }
      } else if [status_code] >= 400 and [status_code] < 500 {
        mutate { add_field => { "status_category" => "client_error" } }
      } else if [status_code] >= 500 {
        mutate { add_field => { "status_category" => "server_error" } }
      }
    }
  }

  # 에러 로그 파싱
  if "error" in [tags] {
    # 스택 트레이스 파싱
    if [stack] {
      mutate {
        add_field => { "has_stack_trace" => "true" }
      }
    }

    # 에러 심각도 분류
    if [level] {
      if [level] == "error" {
        mutate { add_field => { "severity" => "high" } }
      } else if [level] == "warn" {
        mutate { add_field => { "severity" => "medium" } }
      } else {
        mutate { add_field => { "severity" => "low" } }
      }
    }
  }

  # 사용자 활동 로그 파싱
  if [metadata] and [metadata][userId] {
    mutate {
      add_field => { "user_id" => "%{[metadata][userId]}" }
    }
  }

  # 지리적 위치 정보 추가 (클라이언트 IP 기반)
  if [client_ip] and [client_ip] != "127.0.0.1" and [client_ip] != "::1" {
    geoip {
      source => "client_ip"
      target => "geoip"
    }
  }

  # 공통 필드 추가
  mutate {
    add_field => { 
      "application" => "finance-tracker"
      "environment" => "%{[@metadata][environment]}"
    }
  }

  # 불필요한 필드 제거
  mutate {
    remove_field => [ "host", "path" ]
  }
}

output {
  # Elasticsearch로 로그 전송
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "finance-tracker-logs-%{+YYYY.MM.dd}"
    template_name => "finance-tracker"
    template => "/usr/share/logstash/templates/finance-tracker-template.json"
    template_overwrite => true
  }

  # 개발 환경에서 콘솔 출력
  if [@metadata][environment] == "development" {
    stdout {
      codec => rubydebug
    }
  }

  # 에러 로그는 별도 인덱스로 저장
  if "error" in [tags] or [level] == "error" {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "finance-tracker-errors-%{+YYYY.MM.dd}"
    }
  }

  # 성능 로그는 별도 인덱스로 저장
  if "http" in [tags] and [response_time] and [response_time] > 1000 {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "finance-tracker-performance-%{+YYYY.MM.dd}"
    }
  }
}
